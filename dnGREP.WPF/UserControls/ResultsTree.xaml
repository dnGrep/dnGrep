<UserControl x:Class="dnGREP.WPF.UserControls.ResultsTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:my="clr-namespace:dnGREP.WPF"
             xmlns:l="clr-namespace:dnGREP.Localization;assembly=dnGREP.Localization"
             xmlns:Controls="clr-namespace:dnGREP.WPF.UserControls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             d:DesignHeight="300"
             d:DesignWidth="300"
             mc:Ignorable="d"
             my:InputBindingsBehavior.InputBindings="{Binding InputBindings}" >

    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <my:BoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" TrueValue="Hidden" FalseValue="Visible" />
        <my:BoolToScrollBarVisibilityConverter x:Key="BoolToScollBarVisibilityConverter"/>
        <my:BoolToTextWrappingConverter x:Key="BoolToTextWrappingConverter"/>
        <my:BooleanAndConverter x:Key="BooleanAndConverter"/>
        <my:GridLengthConverter x:Key="GridLengthConverter" />
        <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource ThemedContextMenu}">
            <Setter Property="FontFamily" Value="{Binding Path=DataContext.ApplicationFontFamily, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Setter Property="FontSize" Value="{Binding Path=DataContext.MainFormFontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
        </Style>
    </UserControl.Resources>

    <Controls:MultiSelectTreeView x:Name="treeView" HorizontalContentAlignment="Stretch"
                                  my:FocusExtension.IsFocused="{Binding IsResultsTreeFocused}"
                                  Foreground="{DynamicResource TreeView.Foreground}"
                                  Background="{DynamicResource TreeView.Background}"
                                  BorderBrush="Transparent"
                                  BorderThickness="0"
                                  ItemsSource="{Binding SearchResults}"
                                  SelectedItems="{Binding SelectedNodes}"
                                  MultiSelectRootLevelOnly="False" 
                                  VirtualizingStackPanel.IsVirtualizing="True"
                                  MouseDoubleClick="TreeView_MouseDoubleClick" 
                                  MouseUp="TreeView_MouseUp"
                                  PreviewMouseDoubleClick="TreeView_PreviewMouseDoubleClick"
                                  Grid.IsSharedSizeScope="True"
                                  ScrollViewer.HorizontalScrollBarVisibility="{Binding Path=WrapText, Converter={StaticResource BoolToScollBarVisibilityConverter}}">
        <TreeView.ItemsPanel>
            <ItemsPanelTemplate>
                <Controls:MyVirtualizingStackPanel/>
            </ItemsPanelTemplate>
        </TreeView.ItemsPanel>
        <TreeView.LayoutTransform>
            <ScaleTransform ScaleX="{Binding ResultsScale}" ScaleY="{Binding ResultsScale}" />
        </TreeView.LayoutTransform>
        <TreeView.Resources>
            <HierarchicalDataTemplate DataType="{x:Type my:FormattedGrepResult}" ItemsSource="{Binding FormattedLines}">
                <StackPanel Orientation="Vertical">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ICON"/>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Image Grid.Column="0" 
                               Height="16" Source="{Binding Icon}" />
                        <TextBlock Grid.Column="1" 
                                   Margin="6,0,0,0"
                                   TextWrapping="{Binding WrapText, Converter={StaticResource BoolToTextWrappingConverter}}">
                            <Run Text="{Binding FilePath}"/><Run Text="{Binding FileName}" FontWeight="{Binding FileNameFontWeight}"/> <Run Text="{Binding FileInfo}"/>
                            <TextBlock.ToolTip>
                                <ToolTip  Visibility="{Binding ShowFileInfoTooltips, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <StackPanel Orientation="Vertical">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="3,0" Text="{l:Loc Key='Main_Attributes_File'}"/>
                                            <TextBlock Margin="3,0" Text="{Binding GrepResult.FileInfo.Name}"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="3,0" Text="{l:Loc Key='Main_Attributes_Type'}"/>
                                            <TextBlock Margin="3,0" Text="{Binding GrepResult.FileType}"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="3,0" Text="{l:Loc Key='Main_Attributes_Encoding'}"/>
                                            <TextBlock Margin="3,0" Text="{Binding GrepResult.Encoding.EncodingName}"/>
                                            <TextBlock Margin="3,0" Text="{Binding GrepResult.Encoding.CodePage, StringFormat=cp{0}}"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="3,0" Text="{l:Loc Key='Main_Attributes_Size'}"/>
                                            <TextBlock Margin="3,0" Text="{Binding GrepResult.FileSize}"/>
                                        </StackPanel>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Margin="3,0" Text="{l:Loc Key='Main_Attributes_DateModified'}"/>
                                            <TextBlock Margin="3,0" Text="{Binding GrepResult.FileInfo.LastWriteTimeString}"/>
                                        </StackPanel>
                                    </StackPanel>
                                </ToolTip>
                            </TextBlock.ToolTip>
                        </TextBlock>
                    </Grid>
                    <Viewbox Width="20" Height="20" Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <Controls:BusyIndicator Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    </Viewbox>
                </StackPanel>
            </HierarchicalDataTemplate>
            <DataTemplate DataType="{x:Type my:FormattedGrepLine}">
                <Border BorderBrush="{DynamicResource TreeView.Section.Border}">
                    <Border.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="BorderThickness" Value="0,0,0,0" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsSectionBreak}" Value="True">
                                    <Setter Property="BorderThickness" Value="0,1,0,0" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Resources>
                    <Grid>
                        <Grid.Resources>
                            <Style TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource TreeView.LineNumber.Selected.Background}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Value="False">
                                        <Setter Property="Background" Value="{DynamicResource TreeView.LineNumber.Deselected.Background}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Style}" Value="Empty">
                                        <Setter Property="Background" Value="{DynamicResource TreeView.LineNumber.Empty.Background}" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" 
                                              SharedSizeGroup="NUM"/>
                            <ColumnDefinition Width="{Binding Path=ResultColumn1Width, Converter={StaticResource GridLengthConverter}}" 
                                              SharedSizeGroup="{Binding ResultColumn1SharedSizeGroupName}"/>
                            <ColumnDefinition Width="{Binding Path=ResultColumn2Width, Converter={StaticResource GridLengthConverter}}" 
                                              SharedSizeGroup="COL2"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0"
                                   Width="{Binding LineNumberColumnWidth}"
                                   Margin="-3" Padding="3,0,3,0"
                                   Text="{Binding FormattedLineNumber}"
                                   TextAlignment="{Binding LineNumberAlignment}" />
                        <my:InlineTextBlock Grid.Column="1" 
                                            Margin="6,0,0,0" InlineCollection="{Binding FormattedText}" 
                                            FontFamily="{Binding Path=DataContext.ResultsFontFamily, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                            FontSize="{Binding Path=DataContext.ResultsFontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                                            TextWrapping="{Binding WrapText, Converter={StaticResource BoolToTextWrappingConverter}}"/>
                        <TextBlock Grid.Column="2"
                                   Margin="24,0,0,0" Text="{Binding FormattedHexValues}"
                                   FontFamily="{Binding Path=DataContext.ResultsFontFamily, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                   FontSize="{Binding Path=DataContext.ResultsFontSize, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                   Style="{StaticResource ThemedTextBlock}"
                                   Visibility="{Binding IsHexData, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Grid>
                </Border>
            </DataTemplate>
        </TreeView.Resources>
        <TreeView.ContextMenu>
            <ContextMenu>
                <MenuItem Header="{l:Loc Key='Main_Results_Open'}" Command="{Binding OpenFilesCommand}" InputGestureText="{Binding OpenFilesCommand.KeyGestureText}" />

                <MenuItem Margin="0,0,3,0" Header="{l:Loc Key='Main_Results_OpenWith'}"
                          ItemsSource="{Binding Path=EditorMenuItems, UpdateSourceTrigger=PropertyChanged}" >
                    <MenuItem.ItemContainerStyle>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ThemedMenuItem}">
                            <Setter Property="Header" Value="{Binding Header}"/>
                            <Setter Property="Command" Value="{Binding Command}"/>
                            <Setter Property="InputGestureText" Value="{Binding Command.KeyGestureText}"/>
                        </Style>
                    </MenuItem.ItemContainerStyle>
                </MenuItem>
                <MenuItem Header="{l:Loc Key='Main_Results_OpenContainingFolder'}" Command="{Binding OpenContainingFolderCommand}" InputGestureText="{Binding OpenContainingFolderCommand.KeyGestureText}"/>
                <MenuItem Header="{l:Loc Key='Main_Results_RenameFile'}" Command="{Binding RenameFileCommand}" InputGestureText="{Binding RenameFileCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_CopyFiles'}" Command="{Binding CopyFilesCommand}" InputGestureText="{Binding CopyFilesCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_MoveFiles'}" Command="{Binding MoveFilesCommand}" InputGestureText="{Binding MoveFilesCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_DeleteFiles'}" Command="{Binding DeleteFilesCommand}" InputGestureText="{Binding DeleteFilesCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_MoveFilesToRecycleBin'}" Command="{Binding RecycleFilesCommand}" InputGestureText="{Binding RecycleFilesCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_MakeWritable'}" Command="{Binding MakeWritableCommand}" InputGestureText="{Binding MakeWritableCommand.KeyGestureText}" />
                <Separator />
                <MenuItem Header="{l:Loc Key='Main_Results_ShowExplorerMenu'}" Command="{Binding OpenExplorerMenuCommand}" InputGestureText="{Binding OpenExplorerMenuCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_ShowFileProperties'}" Command="{Binding ShowFilePropertiesCommand}" InputGestureText="{Binding ShowFilePropertiesCommand.KeyGestureText}" />
                <Separator />
                <MenuItem Header="{l:Loc Key='Main_Results_CompareFiles'}" Command="{Binding CompareFilesCommand}" InputGestureText="{Binding CompareFilesCommand.KeyGestureText}"
                          ToolTipService.ShowOnDisabled="True">
                    <MenuItem.ToolTip>
                        <ToolTip Content="{l:Loc Key='Main_Results_Tooltip_NotConfigured'}"
                                 Visibility="{Binding Path=CompareApplicationConfigured, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
                    </MenuItem.ToolTip>
                </MenuItem>
                <MenuItem Header="{l:Loc Key='Main_Results_CopyFileNames'}" Command="{Binding CopyFileNamesCommand}" InputGestureText="{Binding CopyFileNamesCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_CopyFullFilePaths'}" Command="{Binding CopyFullFilePathsCommand}" InputGestureText="{Binding CopyFullFilePathsCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_CopyLinesOfText'}" Command="{Binding CopyGrepLinesCommand}" InputGestureText="{Binding CopyGrepLinesCommand.KeyGestureText}" />
                <Separator />
                <MenuItem Header="{l:Loc Key='Main_Results_ExcludeFromResults'}" Command="{Binding ExcludeFilesCommand}" InputGestureText="{Binding ExcludeFilesCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_NextMatch'}" Command="{Binding NextLineCommand}" InputGestureText="{Binding NextLineCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_NextFile'}" Command="{Binding NextFileCommand}" InputGestureText="{Binding NextFileCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_PreviousMatch'}" Command="{Binding PreviousLineCommand}" InputGestureText="{Binding PreviousLineCommand.KeyGestureText}"/>
                <MenuItem Header="{l:Loc Key='Main_Results_PreviousFile'}" Command="{Binding PreviousFileCommand}" InputGestureText="{Binding PreviousFileCommand.KeyGestureText}"/>
                <MenuItem Header="{l:Loc Key='Main_Results_ExpandAll'}" Command="{Binding ExpandAllCommand}" InputGestureText="{Binding ExpandAllCommand.KeyGestureText}" />
                <MenuItem Header="{l:Loc Key='Main_Results_CollapseAll'}" Command="{Binding CollapseAllCommand}" InputGestureText="{Binding CollapseAllCommand.KeyGestureText}"/>
                <Separator />
                <MenuItem Header="{l:Loc Key='Main_Results_ResetZoom'}" Command="{Binding ResetZoomCommand}" InputGestureText="{Binding ResetZoomCommand.KeyGestureText}" />
            </ContextMenu>
        </TreeView.ContextMenu>
        <TreeView.ItemContainerStyle>
            <Style TargetType="{x:Type TreeViewItem}">
                <Setter Property="Foreground" Value="{DynamicResource TreeView.Foreground}" />
                <Setter Property="Controls:MultiSelectTreeView.IsItemSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                <EventSetter Event="UIElement.MouseRightButtonDown" Handler="TreeView_MouseDown" />
                <EventSetter Event="UIElement.PreviewMouseLeftButtonDown" Handler="TreeView_PreviewMouseLeftButtonDown" />
                <EventSetter Event="UIElement.PreviewMouseMove" Handler="TreeView_PreviewMouseMove" />
                <EventSetter Event="RequestBringIntoView" Handler="TreeView_RequestBringIntoView" />
                <EventSetter Event="Selected" Handler="TreeView_OnSelected" />
                <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <Controls:MyVirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TreeViewItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="19" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <ToggleButton x:Name="Expander" Grid.Column="0"
                                              Style="{StaticResource ExpandCollapseToggleStyle}"
                                              ClickMode="Press"
                                              IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                                <Border x:Name="Bd" Grid.Column="1" Grid.ColumnSpan="2"
                                        Padding="{TemplateBinding Padding}"
                                        SnapsToDevicePixels="true"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <ContentPresenter x:Name="PART_Header"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      ContentSource="Header" />
                                </Border>
                                <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1"
                                                Grid.ColumnSpan="2" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="false">
                                    <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                                </Trigger>
                                <Trigger Property="Controls:MultiSelectTreeView.IsItemSelected" Value="true">
                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource TreeViewItem.Highlight.Background}" />
                                    <Setter Property="Foreground" Value="{DynamicResource TreeView.Foreground}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Controls:MultiSelectTreeView.IsItemSelected" Value="true" />
                                        <Condition Property="IsSelectionActive" Value="false" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource TreeViewItem.InactiveHighlight.Background}" />
                                    <Setter Property="Foreground" Value="{DynamicResource TreeView.Foreground}" />
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource Control.GrayText}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Style}" Value="Context">
                        <Setter Property="Foreground" Value="{DynamicResource Control.GrayText}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Style}" Value="ReadOnly">
                        <Setter Property="Foreground" Value="{DynamicResource Control.GrayText}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Style}" Value="Error">
                        <Setter Property="Foreground" Value="Red" />
                    </DataTrigger>
                    <Trigger Property="Controls:MultiSelectTreeView.IsItemSelected" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.Highlight.Border}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="Controls:MultiSelectTreeView.IsItemSelected" Value="True" />
                            <Condition Property="IsSelectionActive" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="BorderBrush" Value="{DynamicResource TreeViewItem.InactiveHighlight.Border}" />
                    </MultiTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding GrepLine.IsContext}" Value="True"/>
                            <Condition Binding="{Binding Path=DataContext.ShowLinesInContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
        </TreeView.ItemContainerStyle>
    </Controls:MultiSelectTreeView>
</UserControl>
