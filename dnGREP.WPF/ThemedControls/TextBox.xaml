<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:l="clr-namespace:dnGREP.Localization;assembly=dnGREP.Localization"
                    xmlns:my="clr-namespace:dnGREP.WPF"
                    xmlns:s="clr-namespace:System;assembly=mscorlib">


    <s:Boolean x:Key="BooleanTrue">True</s:Boolean>
    <s:Boolean x:Key="BooleanFalse">False</s:Boolean>

    <Style x:Key="ThemedTextBox" TargetType="{x:Type TextBoxBase}" BasedOn="{x:Null}">
        <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource Control.Static.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Control.Static.Border}" />
        <!--<Setter Property="ContextMenu" Value="{DynamicResource TextBoxMetroContextMenu}" />-->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,1,1,1" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="SelectionBrush" Value="{DynamicResource Control.Highlight}" />
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Border VerticalAlignment="Top" BorderThickness="1" BorderBrush="#FFdc000c">
                            <Grid>
                                <AdornedElementPlaceholder x:Name="adorner" Margin="-1" />
                            </Grid>
                        </Border>
                        <Border x:Name="errorBorder" MinHeight="24" Margin="16,0,0,0"
                                Background="#FFdc000c" Opacity="0" CornerRadius="0"
                                IsHitTestVisible="False">
                            <TextBlock Margin="8,2,8,3" VerticalAlignment="Center"
                                       Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)/ErrorContent}"
                                       Foreground="White" TextWrapping="Wrap" />
                        </Border>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused" />
                            </DataTrigger.Binding>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="fadeInStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="errorBorder" Storyboard.TargetProperty="Opacity" To="1"
                                                         Duration="00:00:00.15" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeInStoryboard" />
                                <BeginStoryboard x:Name="fadeOutStoryBoard">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="errorBorder" Storyboard.TargetProperty="Opacity" To="0"
                                                         Duration="00:00:00" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border x:Name="Bd"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ContentHost" RenderOptions.ClearTypeHint="Enabled" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="{StaticResource BooleanTrue}">
                            <Setter Property="Foreground" Value="{DynamicResource Control.Disabled.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="Background" Value="{DynamicResource Control.Focused.Background}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsReadOnly" Value="{StaticResource BooleanFalse}" />
                                <Condition Property="IsEnabled" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource Control.MouseOver.InputBackground}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Control.MouseOver.InputBorder}" />
                            <Setter Property="Foreground" Value="{DynamicResource Control.MouseOver.Foreground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Header="{l:Loc Key='TextBox_Command_Cut'}" 
                              InputGestureText="{x:Static my:TextBoxCommands.CutGesture}" 
                              Command="{x:Static ApplicationCommands.Cut}"/>
                    <MenuItem Header="{l:Loc Key='TextBox_Command_Copy'}" 
                              InputGestureText="{x:Static my:TextBoxCommands.CopyGesture}" 
                              Command="{x:Static ApplicationCommands.Copy}"/>
                    <MenuItem Header="{l:Loc Key='TextBox_Command_Paste'}" 
                              InputGestureText="{x:Static my:TextBoxCommands.PasteGesture}" 
                              Command="{x:Static ApplicationCommands.Paste}"/>
                    <Separator/>
                    <MenuItem Header="{l:Loc Key='TextBox_Command_MakeUppercase'}" 
                              InputGestureText="{x:Static my:TextBoxCommands.LowerCaseGesture}" 
                              Command="{x:Static my:TextBoxCommands.MakeUpperCase}"/>
                    <MenuItem Header="{l:Loc Key='TextBox_Command_MakeLowercase'}" 
                              InputGestureText="{x:Static my:TextBoxCommands.UpperCaseGesture}" 
                              Command="{x:Static my:TextBoxCommands.MakeLowerCase}"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource ThemedTextBox}" TargetType="{x:Type TextBox}" />
    <Style BasedOn="{StaticResource ThemedTextBox}" TargetType="{x:Type RichTextBox}" />
    <Style BasedOn="{StaticResource ThemedTextBox}" TargetType="{x:Type my:DepthTextBox}" />

</ResourceDictionary>